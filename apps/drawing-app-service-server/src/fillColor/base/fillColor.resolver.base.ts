/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FillColor } from "./FillColor";
import { FillColorCountArgs } from "./FillColorCountArgs";
import { FillColorFindManyArgs } from "./FillColorFindManyArgs";
import { FillColorFindUniqueArgs } from "./FillColorFindUniqueArgs";
import { CreateFillColorArgs } from "./CreateFillColorArgs";
import { UpdateFillColorArgs } from "./UpdateFillColorArgs";
import { DeleteFillColorArgs } from "./DeleteFillColorArgs";
import { Drawing } from "../../drawing/base/Drawing";
import { FillColorService } from "../fillColor.service";
@graphql.Resolver(() => FillColor)
export class FillColorResolverBase {
  constructor(protected readonly service: FillColorService) {}

  async _fillColorsMeta(
    @graphql.Args() args: FillColorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FillColor])
  async fillColors(
    @graphql.Args() args: FillColorFindManyArgs
  ): Promise<FillColor[]> {
    return this.service.fillColors(args);
  }

  @graphql.Query(() => FillColor, { nullable: true })
  async fillColor(
    @graphql.Args() args: FillColorFindUniqueArgs
  ): Promise<FillColor | null> {
    const result = await this.service.fillColor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FillColor)
  async createFillColor(
    @graphql.Args() args: CreateFillColorArgs
  ): Promise<FillColor> {
    return await this.service.createFillColor({
      ...args,
      data: {
        ...args.data,

        drawing: args.data.drawing
          ? {
              connect: args.data.drawing,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => FillColor)
  async updateFillColor(
    @graphql.Args() args: UpdateFillColorArgs
  ): Promise<FillColor | null> {
    try {
      return await this.service.updateFillColor({
        ...args,
        data: {
          ...args.data,

          drawing: args.data.drawing
            ? {
                connect: args.data.drawing,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FillColor)
  async deleteFillColor(
    @graphql.Args() args: DeleteFillColorArgs
  ): Promise<FillColor | null> {
    try {
      return await this.service.deleteFillColor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Drawing, {
    nullable: true,
    name: "drawing",
  })
  async getDrawing(
    @graphql.Parent() parent: FillColor
  ): Promise<Drawing | null> {
    const result = await this.service.getDrawing(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
