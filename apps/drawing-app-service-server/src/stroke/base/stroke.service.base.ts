/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Stroke as PrismaStroke,
  Drawing as PrismaDrawing,
  Brush as PrismaBrush,
} from "@prisma/client";

export class StrokeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StrokeCountArgs, "select">): Promise<number> {
    return this.prisma.stroke.count(args);
  }

  async strokes(args: Prisma.StrokeFindManyArgs): Promise<PrismaStroke[]> {
    return this.prisma.stroke.findMany(args);
  }
  async stroke(
    args: Prisma.StrokeFindUniqueArgs
  ): Promise<PrismaStroke | null> {
    return this.prisma.stroke.findUnique(args);
  }
  async createStroke(args: Prisma.StrokeCreateArgs): Promise<PrismaStroke> {
    return this.prisma.stroke.create(args);
  }
  async updateStroke(args: Prisma.StrokeUpdateArgs): Promise<PrismaStroke> {
    return this.prisma.stroke.update(args);
  }
  async deleteStroke(args: Prisma.StrokeDeleteArgs): Promise<PrismaStroke> {
    return this.prisma.stroke.delete(args);
  }

  async getDrawing(parentId: string): Promise<PrismaDrawing | null> {
    return this.prisma.stroke
      .findUnique({
        where: { id: parentId },
      })
      .drawing();
  }

  async getBrush(parentId: string): Promise<PrismaBrush | null> {
    return this.prisma.stroke
      .findUnique({
        where: { id: parentId },
      })
      .brush();
  }
}
