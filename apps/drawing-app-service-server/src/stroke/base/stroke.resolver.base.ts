/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Stroke } from "./Stroke";
import { StrokeCountArgs } from "./StrokeCountArgs";
import { StrokeFindManyArgs } from "./StrokeFindManyArgs";
import { StrokeFindUniqueArgs } from "./StrokeFindUniqueArgs";
import { CreateStrokeArgs } from "./CreateStrokeArgs";
import { UpdateStrokeArgs } from "./UpdateStrokeArgs";
import { DeleteStrokeArgs } from "./DeleteStrokeArgs";
import { Drawing } from "../../drawing/base/Drawing";
import { Brush } from "../../brush/base/Brush";
import { StrokeService } from "../stroke.service";
@graphql.Resolver(() => Stroke)
export class StrokeResolverBase {
  constructor(protected readonly service: StrokeService) {}

  async _strokesMeta(
    @graphql.Args() args: StrokeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Stroke])
  async strokes(@graphql.Args() args: StrokeFindManyArgs): Promise<Stroke[]> {
    return this.service.strokes(args);
  }

  @graphql.Query(() => Stroke, { nullable: true })
  async stroke(
    @graphql.Args() args: StrokeFindUniqueArgs
  ): Promise<Stroke | null> {
    const result = await this.service.stroke(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Stroke)
  async createStroke(@graphql.Args() args: CreateStrokeArgs): Promise<Stroke> {
    return await this.service.createStroke({
      ...args,
      data: {
        ...args.data,

        drawing: args.data.drawing
          ? {
              connect: args.data.drawing,
            }
          : undefined,

        brush: args.data.brush
          ? {
              connect: args.data.brush,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Stroke)
  async updateStroke(
    @graphql.Args() args: UpdateStrokeArgs
  ): Promise<Stroke | null> {
    try {
      return await this.service.updateStroke({
        ...args,
        data: {
          ...args.data,

          drawing: args.data.drawing
            ? {
                connect: args.data.drawing,
              }
            : undefined,

          brush: args.data.brush
            ? {
                connect: args.data.brush,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Stroke)
  async deleteStroke(
    @graphql.Args() args: DeleteStrokeArgs
  ): Promise<Stroke | null> {
    try {
      return await this.service.deleteStroke(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Drawing, {
    nullable: true,
    name: "drawing",
  })
  async getDrawing(@graphql.Parent() parent: Stroke): Promise<Drawing | null> {
    const result = await this.service.getDrawing(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Brush, {
    nullable: true,
    name: "brush",
  })
  async getBrush(@graphql.Parent() parent: Stroke): Promise<Brush | null> {
    const result = await this.service.getBrush(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
