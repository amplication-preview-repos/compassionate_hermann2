/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Brush as PrismaBrush,
  Stroke as PrismaStroke,
} from "@prisma/client";

export class BrushServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BrushCountArgs, "select">): Promise<number> {
    return this.prisma.brush.count(args);
  }

  async brushes(args: Prisma.BrushFindManyArgs): Promise<PrismaBrush[]> {
    return this.prisma.brush.findMany(args);
  }
  async brush(args: Prisma.BrushFindUniqueArgs): Promise<PrismaBrush | null> {
    return this.prisma.brush.findUnique(args);
  }
  async createBrush(args: Prisma.BrushCreateArgs): Promise<PrismaBrush> {
    return this.prisma.brush.create(args);
  }
  async updateBrush(args: Prisma.BrushUpdateArgs): Promise<PrismaBrush> {
    return this.prisma.brush.update(args);
  }
  async deleteBrush(args: Prisma.BrushDeleteArgs): Promise<PrismaBrush> {
    return this.prisma.brush.delete(args);
  }

  async findStrokes(
    parentId: string,
    args: Prisma.StrokeFindManyArgs
  ): Promise<PrismaStroke[]> {
    return this.prisma.brush
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .strokes(args);
  }
}
