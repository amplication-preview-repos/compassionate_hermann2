/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Drawing as PrismaDrawing,
  Stroke as PrismaStroke,
  FillColor as PrismaFillColor,
  User as PrismaUser,
} from "@prisma/client";

export class DrawingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DrawingCountArgs, "select">): Promise<number> {
    return this.prisma.drawing.count(args);
  }

  async drawings(args: Prisma.DrawingFindManyArgs): Promise<PrismaDrawing[]> {
    return this.prisma.drawing.findMany(args);
  }
  async drawing(
    args: Prisma.DrawingFindUniqueArgs
  ): Promise<PrismaDrawing | null> {
    return this.prisma.drawing.findUnique(args);
  }
  async createDrawing(args: Prisma.DrawingCreateArgs): Promise<PrismaDrawing> {
    return this.prisma.drawing.create(args);
  }
  async updateDrawing(args: Prisma.DrawingUpdateArgs): Promise<PrismaDrawing> {
    return this.prisma.drawing.update(args);
  }
  async deleteDrawing(args: Prisma.DrawingDeleteArgs): Promise<PrismaDrawing> {
    return this.prisma.drawing.delete(args);
  }

  async findStrokes(
    parentId: string,
    args: Prisma.StrokeFindManyArgs
  ): Promise<PrismaStroke[]> {
    return this.prisma.drawing
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .strokes(args);
  }

  async findFillColors(
    parentId: string,
    args: Prisma.FillColorFindManyArgs
  ): Promise<PrismaFillColor[]> {
    return this.prisma.drawing
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .fillColors(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.drawing
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
