/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FillColorService } from "../fillColor.service";
import { FillColorCreateInput } from "./FillColorCreateInput";
import { FillColor } from "./FillColor";
import { FillColorFindManyArgs } from "./FillColorFindManyArgs";
import { FillColorWhereUniqueInput } from "./FillColorWhereUniqueInput";
import { FillColorUpdateInput } from "./FillColorUpdateInput";

export class FillColorControllerBase {
  constructor(protected readonly service: FillColorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FillColor })
  @swagger.ApiBody({
    type: FillColorCreateInput,
  })
  async createFillColor(
    @common.Body() data: FillColorCreateInput
  ): Promise<FillColor> {
    return await this.service.createFillColor({
      data: {
        ...data,

        drawing: data.drawing
          ? {
              connect: data.drawing,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        color: true,

        drawing: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FillColor] })
  @ApiNestedQuery(FillColorFindManyArgs)
  async fillColors(@common.Req() request: Request): Promise<FillColor[]> {
    const args = plainToClass(FillColorFindManyArgs, request.query);
    return this.service.fillColors({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        color: true,

        drawing: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FillColor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fillColor(
    @common.Param() params: FillColorWhereUniqueInput
  ): Promise<FillColor | null> {
    const result = await this.service.fillColor({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        color: true,

        drawing: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FillColor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: FillColorUpdateInput,
  })
  async updateFillColor(
    @common.Param() params: FillColorWhereUniqueInput,
    @common.Body() data: FillColorUpdateInput
  ): Promise<FillColor | null> {
    try {
      return await this.service.updateFillColor({
        where: params,
        data: {
          ...data,

          drawing: data.drawing
            ? {
                connect: data.drawing,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          color: true,

          drawing: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FillColor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFillColor(
    @common.Param() params: FillColorWhereUniqueInput
  ): Promise<FillColor | null> {
    try {
      return await this.service.deleteFillColor({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          color: true,

          drawing: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
