/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Drawing } from "./Drawing";
import { DrawingCountArgs } from "./DrawingCountArgs";
import { DrawingFindManyArgs } from "./DrawingFindManyArgs";
import { DrawingFindUniqueArgs } from "./DrawingFindUniqueArgs";
import { CreateDrawingArgs } from "./CreateDrawingArgs";
import { UpdateDrawingArgs } from "./UpdateDrawingArgs";
import { DeleteDrawingArgs } from "./DeleteDrawingArgs";
import { StrokeFindManyArgs } from "../../stroke/base/StrokeFindManyArgs";
import { Stroke } from "../../stroke/base/Stroke";
import { FillColorFindManyArgs } from "../../fillColor/base/FillColorFindManyArgs";
import { FillColor } from "../../fillColor/base/FillColor";
import { User } from "../../user/base/User";
import { DrawingService } from "../drawing.service";
@graphql.Resolver(() => Drawing)
export class DrawingResolverBase {
  constructor(protected readonly service: DrawingService) {}

  async _drawingsMeta(
    @graphql.Args() args: DrawingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Drawing])
  async drawings(
    @graphql.Args() args: DrawingFindManyArgs
  ): Promise<Drawing[]> {
    return this.service.drawings(args);
  }

  @graphql.Query(() => Drawing, { nullable: true })
  async drawing(
    @graphql.Args() args: DrawingFindUniqueArgs
  ): Promise<Drawing | null> {
    const result = await this.service.drawing(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Drawing)
  async createDrawing(
    @graphql.Args() args: CreateDrawingArgs
  ): Promise<Drawing> {
    return await this.service.createDrawing({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Drawing)
  async updateDrawing(
    @graphql.Args() args: UpdateDrawingArgs
  ): Promise<Drawing | null> {
    try {
      return await this.service.updateDrawing({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Drawing)
  async deleteDrawing(
    @graphql.Args() args: DeleteDrawingArgs
  ): Promise<Drawing | null> {
    try {
      return await this.service.deleteDrawing(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Stroke], { name: "strokes" })
  async findStrokes(
    @graphql.Parent() parent: Drawing,
    @graphql.Args() args: StrokeFindManyArgs
  ): Promise<Stroke[]> {
    const results = await this.service.findStrokes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [FillColor], { name: "fillColors" })
  async findFillColors(
    @graphql.Parent() parent: Drawing,
    @graphql.Args() args: FillColorFindManyArgs
  ): Promise<FillColor[]> {
    const results = await this.service.findFillColors(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Drawing): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
