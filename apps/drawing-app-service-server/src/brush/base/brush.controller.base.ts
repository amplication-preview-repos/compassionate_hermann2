/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BrushService } from "../brush.service";
import { BrushCreateInput } from "./BrushCreateInput";
import { Brush } from "./Brush";
import { BrushFindManyArgs } from "./BrushFindManyArgs";
import { BrushWhereUniqueInput } from "./BrushWhereUniqueInput";
import { BrushUpdateInput } from "./BrushUpdateInput";
import { StrokeFindManyArgs } from "../../stroke/base/StrokeFindManyArgs";
import { Stroke } from "../../stroke/base/Stroke";
import { StrokeWhereUniqueInput } from "../../stroke/base/StrokeWhereUniqueInput";

export class BrushControllerBase {
  constructor(protected readonly service: BrushService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Brush })
  @swagger.ApiBody({
    type: BrushCreateInput,
  })
  async createBrush(@common.Body() data: BrushCreateInput): Promise<Brush> {
    return await this.service.createBrush({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        size: true,
        color: true,
        name: true,
        typeField: true,
        brushStyle: true,
        brushVariant: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Brush] })
  @ApiNestedQuery(BrushFindManyArgs)
  async brushes(@common.Req() request: Request): Promise<Brush[]> {
    const args = plainToClass(BrushFindManyArgs, request.query);
    return this.service.brushes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        size: true,
        color: true,
        name: true,
        typeField: true,
        brushStyle: true,
        brushVariant: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Brush })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async brush(
    @common.Param() params: BrushWhereUniqueInput
  ): Promise<Brush | null> {
    const result = await this.service.brush({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        size: true,
        color: true,
        name: true,
        typeField: true,
        brushStyle: true,
        brushVariant: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Brush })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: BrushUpdateInput,
  })
  async updateBrush(
    @common.Param() params: BrushWhereUniqueInput,
    @common.Body() data: BrushUpdateInput
  ): Promise<Brush | null> {
    try {
      return await this.service.updateBrush({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          size: true,
          color: true,
          name: true,
          typeField: true,
          brushStyle: true,
          brushVariant: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Brush })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBrush(
    @common.Param() params: BrushWhereUniqueInput
  ): Promise<Brush | null> {
    try {
      return await this.service.deleteBrush({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          size: true,
          color: true,
          name: true,
          typeField: true,
          brushStyle: true,
          brushVariant: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/strokes")
  @ApiNestedQuery(StrokeFindManyArgs)
  async findStrokes(
    @common.Req() request: Request,
    @common.Param() params: BrushWhereUniqueInput
  ): Promise<Stroke[]> {
    const query = plainToClass(StrokeFindManyArgs, request.query);
    const results = await this.service.findStrokes(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        path: true,
        coordinates: true,

        drawing: {
          select: {
            id: true,
          },
        },

        brush: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/strokes")
  async connectStrokes(
    @common.Param() params: BrushWhereUniqueInput,
    @common.Body() body: StrokeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      strokes: {
        connect: body,
      },
    };
    await this.service.updateBrush({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/strokes")
  async updateStrokes(
    @common.Param() params: BrushWhereUniqueInput,
    @common.Body() body: StrokeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      strokes: {
        set: body,
      },
    };
    await this.service.updateBrush({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/strokes")
  async disconnectStrokes(
    @common.Param() params: BrushWhereUniqueInput,
    @common.Body() body: StrokeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      strokes: {
        disconnect: body,
      },
    };
    await this.service.updateBrush({
      where: params,
      data,
      select: { id: true },
    });
  }
}
