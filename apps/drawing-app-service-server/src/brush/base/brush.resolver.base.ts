/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Brush } from "./Brush";
import { BrushCountArgs } from "./BrushCountArgs";
import { BrushFindManyArgs } from "./BrushFindManyArgs";
import { BrushFindUniqueArgs } from "./BrushFindUniqueArgs";
import { CreateBrushArgs } from "./CreateBrushArgs";
import { UpdateBrushArgs } from "./UpdateBrushArgs";
import { DeleteBrushArgs } from "./DeleteBrushArgs";
import { StrokeFindManyArgs } from "../../stroke/base/StrokeFindManyArgs";
import { Stroke } from "../../stroke/base/Stroke";
import { BrushService } from "../brush.service";
@graphql.Resolver(() => Brush)
export class BrushResolverBase {
  constructor(protected readonly service: BrushService) {}

  async _brushesMeta(
    @graphql.Args() args: BrushCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Brush])
  async brushes(@graphql.Args() args: BrushFindManyArgs): Promise<Brush[]> {
    return this.service.brushes(args);
  }

  @graphql.Query(() => Brush, { nullable: true })
  async brush(
    @graphql.Args() args: BrushFindUniqueArgs
  ): Promise<Brush | null> {
    const result = await this.service.brush(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Brush)
  async createBrush(@graphql.Args() args: CreateBrushArgs): Promise<Brush> {
    return await this.service.createBrush({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Brush)
  async updateBrush(
    @graphql.Args() args: UpdateBrushArgs
  ): Promise<Brush | null> {
    try {
      return await this.service.updateBrush({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Brush)
  async deleteBrush(
    @graphql.Args() args: DeleteBrushArgs
  ): Promise<Brush | null> {
    try {
      return await this.service.deleteBrush(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Stroke], { name: "strokes" })
  async findStrokes(
    @graphql.Parent() parent: Brush,
    @graphql.Args() args: StrokeFindManyArgs
  ): Promise<Stroke[]> {
    const results = await this.service.findStrokes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
