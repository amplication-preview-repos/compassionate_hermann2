/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FillColor as PrismaFillColor,
  Drawing as PrismaDrawing,
} from "@prisma/client";

export class FillColorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FillColorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fillColor.count(args);
  }

  async fillColors(
    args: Prisma.FillColorFindManyArgs
  ): Promise<PrismaFillColor[]> {
    return this.prisma.fillColor.findMany(args);
  }
  async fillColor(
    args: Prisma.FillColorFindUniqueArgs
  ): Promise<PrismaFillColor | null> {
    return this.prisma.fillColor.findUnique(args);
  }
  async createFillColor(
    args: Prisma.FillColorCreateArgs
  ): Promise<PrismaFillColor> {
    return this.prisma.fillColor.create(args);
  }
  async updateFillColor(
    args: Prisma.FillColorUpdateArgs
  ): Promise<PrismaFillColor> {
    return this.prisma.fillColor.update(args);
  }
  async deleteFillColor(
    args: Prisma.FillColorDeleteArgs
  ): Promise<PrismaFillColor> {
    return this.prisma.fillColor.delete(args);
  }

  async getDrawing(parentId: string): Promise<PrismaDrawing | null> {
    return this.prisma.fillColor
      .findUnique({
        where: { id: parentId },
      })
      .drawing();
  }
}
